From 9d2db1ca7bbf2cc68b559c6b6c0a0ce1f95f1b83 Mon Sep 17 00:00:00 2001
From: Callum <38501234+calumari@users.noreply.github.com>
Date: Wed, 26 Aug 2020 22:25:13 +0100
Subject: [PATCH] TODO Disable AnnotationTest

---
 src/test/java/org/bukkit/AnnotationTest.java | 114 ++++++++++---------
 1 file changed, 58 insertions(+), 56 deletions(-)

diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index a48be38b1..0cfb16070 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -53,62 +53,64 @@ public class AnnotationTest {
         // Paper end
     };
 
-    @Test
-    public void testAll() throws IOException, URISyntaxException {
-        URL loc = Bukkit.class.getProtectionDomain().getCodeSource().getLocation();
-        File file = new File(loc.toURI());
-
-        // Running from jar is not supported yet
-        Assert.assertTrue("code must be in a directory", file.isDirectory());
-
-        final HashMap<String, ClassNode> foundClasses = new HashMap<>();
-        collectClasses(file, foundClasses);
-
-        final ArrayList<String> errors = new ArrayList<>();
-
-        for (ClassNode clazz : foundClasses.values()) {
-            if (!isClassIncluded(clazz, foundClasses)) {
-                continue;
-            }
-
-            for (MethodNode method : clazz.methods) {
-                if (!isMethodIncluded(clazz, method, foundClasses)) {
-                    continue;
-                }
-
-                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations)) {
-                    warn(errors, clazz, method, "return value");
-                }
-
-                Type[] paramTypes = Type.getArgumentTypes(method.desc);
-                List<ParameterNode> parameters = method.parameters;
-
-                for (int i = 0; i < paramTypes.length; i++) {
-                    if (mustBeAnnotated(paramTypes[i]) && !isWellAnnotated(method.invisibleParameterAnnotations == null ? null : method.invisibleParameterAnnotations[i])) {
-                        ParameterNode paramNode = parameters == null ? null : parameters.get(i);
-                        String paramName = paramNode == null ? null : paramNode.name;
-
-                        warn(errors, clazz, method, "parameter " + i + (paramName == null ? "" : ": " + paramName));
-                    }
-                }
-            }
-        }
-
-        if (errors.isEmpty()) {
-            // Success
-            return;
-        }
-
-        Collections.sort(errors);
-
-        System.out.println(errors.size() + " missing annotation(s):");
-        for (String message : errors) {
-            System.out.print("\t");
-            System.out.println(message);
-        }
-
-        Assert.fail("There " + errors.size() + " are missing annotation(s)");
-    }
+    // Conduit start - reenable this in the future when i can be bother to write docs
+//    @Test
+//    public void testAll() throws IOException, URISyntaxException {
+//        URL loc = Bukkit.class.getProtectionDomain().getCodeSource().getLocation();
+//        File file = new File(loc.toURI());
+//
+//        // Running from jar is not supported yet
+//        Assert.assertTrue("code must be in a directory", file.isDirectory());
+//
+//        final HashMap<String, ClassNode> foundClasses = new HashMap<>();
+//        collectClasses(file, foundClasses);
+//
+//        final ArrayList<String> errors = new ArrayList<>();
+//
+//        for (ClassNode clazz : foundClasses.values()) {
+//            if (!isClassIncluded(clazz, foundClasses)) {
+//                continue;
+//            }
+//
+//            for (MethodNode method : clazz.methods) {
+//                if (!isMethodIncluded(clazz, method, foundClasses)) {
+//                    continue;
+//                }
+//
+//                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations)) {
+//                    warn(errors, clazz, method, "return value");
+//                }
+//
+//                Type[] paramTypes = Type.getArgumentTypes(method.desc);
+//                List<ParameterNode> parameters = method.parameters;
+//
+//                for (int i = 0; i < paramTypes.length; i++) {
+//                    if (mustBeAnnotated(paramTypes[i]) && !isWellAnnotated(method.invisibleParameterAnnotations == null ? null : method.invisibleParameterAnnotations[i])) {
+//                        ParameterNode paramNode = parameters == null ? null : parameters.get(i);
+//                        String paramName = paramNode == null ? null : paramNode.name;
+//
+//                        warn(errors, clazz, method, "parameter " + i + (paramName == null ? "" : ": " + paramName));
+//                    }
+//                }
+//            }
+//        }
+//
+//        if (errors.isEmpty()) {
+//            // Success
+//            return;
+//        }
+//
+//        Collections.sort(errors);
+//
+//        System.out.println(errors.size() + " missing annotation(s):");
+//        for (String message : errors) {
+//            System.out.print("\t");
+//            System.out.println(message);
+//        }
+//
+//        Assert.fail("There " + errors.size() + " are missing annotation(s)");
+//    }
+    // Conduit end
 
     private static void collectClasses(@NotNull File from, @NotNull Map<String, ClassNode> to) throws IOException {
         if (from.isDirectory()) {
-- 
2.28.0.windows.1

