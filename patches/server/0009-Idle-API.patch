From 0d3f89b6cbd34083ba8a34645971e21157fcb11f Mon Sep 17 00:00:00 2001
From: Callum <38501234+calumari@users.noreply.github.com>
Date: Sat, 30 May 2020 18:06:14 +0100
Subject: [PATCH] Idle API

Based on Purpur's AFK API with more focus on idle farm prevention.
---
 .../minecraft/server/ChunkProviderServer.java |  2 +-
 .../net/minecraft/server/EntityHuman.java     | 10 ++++
 .../net/minecraft/server/EntityPlayer.java    | 33 +++++++++++
 .../net/minecraft/server/IEntityAccess.java   | 58 ++++++++++++-------
 .../net/minecraft/server/IEntitySelector.java |  2 +
 .../minecraft/server/PlayerConnection.java    | 15 +++--
 .../net/minecraft/server/WorldServer.java     |  4 +-
 .../conduit/config/ConduitWorldConfig.java    | 11 ++++
 .../craftbukkit/entity/CraftPlayer.java       | 12 ++++
 .../java/org/spigotmc/ActivationRange.java    |  1 +
 10 files changed, 119 insertions(+), 29 deletions(-)

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 45c142c227..6ffbdacc19 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -764,7 +764,7 @@ public class ChunkProviderServer extends IChunkProvider {
             // Paper start - optimize isOutisdeRange
             PlayerChunkMap playerChunkMap = this.playerChunkMap;
             for (EntityPlayer player : this.world.players) {
-                if (!player.affectsSpawning || player.isSpectator()) {
+                if (!player.affectsSpawning || player.isSpectator() || (player.isIdle() && !player.world.conduitConfig.idleTimeoutSpawnNearbyEntities)) { // Conduit - Idle API
                     playerChunkMap.playerMobSpawnMap.remove(player);
                     continue;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index ce4ebc96c0..2355ef8384 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -2128,4 +2128,14 @@ public abstract class EntityHuman extends EntityLiving {
             return this.g;
         }
     }
+
+    // Conduit start
+
+    public boolean isIdle() {
+        return false;
+    }
+
+    public void setIdle(boolean idle) { }
+
+    // Conduit end
 }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 2aab92eabd..16d6e37447 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1719,6 +1719,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public void resetIdleTimer() {
         this.ca = SystemUtils.getMonotonicMillis();
+        setIdle(false); // Conduit
     }
 
     public ServerStatisticManager getStatisticManager() {
@@ -1830,6 +1831,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     }
 
+    public long getIdleTimer() { return F(); } // Conduit - OBFHELPER
     public long F() {
         return this.ca;
     }
@@ -2124,4 +2126,35 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // Conduit start
+    private boolean idle;
+
+    public boolean isIdle() {
+        return this.idle;
+    }
+
+    public void setIdle(boolean idle) {
+        if (this.idle == idle) {
+            return;
+        }
+
+        net.socialhangover.conduit.event.PlayerIdleEvent event = new net.socialhangover.conduit.event.PlayerIdleEvent(getBukkitEntity(), idle, !Bukkit.isPrimaryThread());
+        if (!event.callEvent()) {
+            return;
+        }
+
+        this.idle = event.isIdle();
+        if (!this.idle) {
+            resetIdleTimer();
+        }
+
+        // todo - reimplement
+        // if (event.getMessage() != null && !event.getMessage().isEmpty()) {
+        // server.getPlayerList().sendAll(new PacketPlayOutChat(new ChatMessage(event.getMessage(), getScoreboardDisplayName())));
+        // }
+
+        ((WorldServer) world).everyoneSleeping();
+    }
+    // Conduit end
 }
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index 1cb8ba7cd2..2716ea33f5 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -139,29 +139,43 @@ public interface IEntityAccess {
     }
     // Paper end
 
-    default boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
-        Iterator iterator = this.getPlayers().iterator();
-
-        double d4;
-
-        do {
-            EntityHuman entityhuman;
-
-            do {
-                do {
-                    if (!iterator.hasNext()) {
-                        return false;
-                    }
-
-                    entityhuman = (EntityHuman) iterator.next();
-                } while (!IEntitySelector.g.test(entityhuman));
-            } while (!IEntitySelector.b.test(entityhuman));
-
-            d4 = entityhuman.h(d0, d1, d2);
-        } while (d3 >= 0.0D && d4 >= d3 * d3);
-
-        return true;
+    // Conduit start - Idle API
+//    default boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
+//        Iterator iterator = this.getPlayers().iterator();
+//
+//        double d4;
+//
+//        do {
+//            EntityHuman entityhuman;
+//
+//            do {
+//                do {
+//                    if (!iterator.hasNext()) {
+//                        return false;
+//                    }
+//
+//                    entityhuman = (EntityHuman) iterator.next();
+//                } while (!IEntitySelector.g.test(entityhuman));
+//            } while (!IEntitySelector.b.test(entityhuman));
+//
+//            d4 = entityhuman.g(d0, d1, d2);
+//        } while (d3 >= 0.0D && d4 >= d3 * d3);
+//
+//        return true;
+//    }
+
+    default boolean isPlayerNearby(double x, double y, double z, double distance) {
+        double d2 = distance * distance;
+        for (EntityHuman player : this.getPlayers()) {
+            if (IEntitySelector.isAlive().test(player) && IEntitySelector.notSpectator().test(player) && (player.world.conduitConfig.idleTimeoutSpawnNearbyEntities || IEntitySelector.notIdle.test(player))) {
+                if (distance < 0.0D || player.getDistanceSquared(x, y, z) < d2) {
+                    return true;
+                }
+            }
+        }
+        return false;
     }
+    // Conduit end - Idle API
 
     @Nullable
     default EntityHuman a(PathfinderTargetCondition pathfindertargetcondition, EntityLiving entityliving) {
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index a9b0c78d6d..f4c1b352c4 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -7,6 +7,7 @@ import javax.annotation.Nullable;
 public final class IEntitySelector {
 
     public static final Predicate<Entity> a = Entity::isAlive;
+    public static final Predicate<EntityLiving> isAlive() { return b; } // Conduit - OBFHELPER
     public static final Predicate<EntityLiving> b = EntityLiving::isAlive;
     public static final Predicate<Entity> c = (entity) -> {
         return entity.isAlive() && !entity.isVehicle() && !entity.isPassenger();
@@ -40,6 +41,7 @@ public final class IEntitySelector {
             return entity != null && entity.h(d0, d1, d2) <= d4;
         };
     }
+    public static Predicate<EntityHuman> notIdle = player -> !player.isIdle(); // Conduit - Idle API
 
     public static Predicate<Entity> a(Entity entity) {
         ScoreboardTeamBase scoreboardteambase = entity.getScoreboardTeam();
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index a5f5a985ba..73bdb62af1 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -233,10 +233,17 @@ public class PlayerConnection implements PacketListenerPlayIn {
         if (this.j > 0) {
             --this.j;
         }
-
-        if (this.player.F() > 0L && this.minecraftServer.getIdleTimeout() > 0 && SystemUtils.getMonotonicMillis() - this.player.F() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
-            this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
-            this.disconnect(new ChatMessage("multiplayer.disconnect.idling"));
+        // Conduit start - Idle API
+        if (this.player.getIdleTimer() > 0L && this.player.world.conduitConfig.idleTimeoutSoft > 0 && SystemUtils.getMonotonicMillis() - this.player.getIdleTimer() > (long) (this.player.world.conduitConfig.idleTimeoutSoft * 1000 * 60)) {
+            this.player.setIdle(true);
+        }
+        if (this.player.getIdleTimer() > 0L && this.minecraftServer.getIdleTimeout() > 0 && SystemUtils.getMonotonicMillis() - this.player.getIdleTimer() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
+            this.player.setIdle(true);
+            if (!player.getBukkitEntity().hasPermission("minecraft.idle.bypass")) {
+                this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
+                this.disconnect(new ChatMessage("multiplayer.disconnect.idling", new Object[0]));
+            }
+            // Conduit end - Idle API
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index efe10b7f58..b91fdc7f4e 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -426,7 +426,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // CraftBukkit end
 
         if (this.everyoneSleeping && this.players.stream().noneMatch((entityplayer) -> {
-            return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping() && !entityplayer.fauxSleeping; // CraftBukkit
+            return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping() && !entityplayer.fauxSleeping && !(conduitConfig.idleTimeoutCountAsSleeping && entityplayer.isIdle()); // CraftBukkit // Conduit
         })) {
             // CraftBukkit start
             long l = this.worldData.getDayTime() + 24000L;
@@ -747,7 +747,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             while (iterator.hasNext()) {
                 EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-                if (entityplayer.isSpectator() || (entityplayer.fauxSleeping && !entityplayer.isSleeping())) { // CraftBukkit
+                if (entityplayer.isSpectator() || (entityplayer.fauxSleeping && !entityplayer.isSleeping()) || (conduitConfig.idleTimeoutCountAsSleeping && entityplayer.isIdle())) { // CraftBukkit // Conduit
                     ++i;
                 } else if (entityplayer.isSleeping()) {
                     ++j;
diff --git a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
index 83ab410b89..834780d671 100644
--- a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
+++ b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
@@ -71,4 +71,15 @@ public class ConduitWorldConfig {
         giantHasHostileAI = getBoolean("mobs.giant.enable-hostile-ai", false);
         giantAggressiveTowardsVillager = getBoolean("mobs.giant.aggressive-towards-villager", false);
     }
+
+    public int idleTimeoutSoft;
+    public boolean idleTimeoutTickNearbyEntities;
+    public boolean idleTimeoutSpawnNearbyEntities;
+    public boolean idleTimeoutCountAsSleeping;
+    private void idleTimeoutSettings() {
+        idleTimeoutSoft = getInt("gameplay-mechanics.idle-timeout.soft-timeout", 0); // the minutes until a player is considered idle without attempting to kick hence "soft".
+        idleTimeoutTickNearbyEntities = getBoolean("gameplay-mechanics.idle-timeout.tick-nearby-entities", true);
+        idleTimeoutSpawnNearbyEntities = getBoolean("gameplay-mechanics.idle-timeout.spawn-nearby-entities", true);
+        idleTimeoutCountAsSleeping = getBoolean("gameplay-mechanics.idle-timeout.count-as-sleeping", false);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b97be51c68..d02db446d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2155,4 +2155,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return spigot;
     }
     // Spigot end
+
+    // Conduit start
+
+    public boolean isIdle() {
+        return getHandle().isIdle();
+    }
+
+    public void setIdle(boolean idle) {
+        getHandle().setIdle(idle);
+    }
+
+    // Conduit end
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 37e930e0cb..b4356fc876 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -207,6 +207,7 @@ public class ActivationRange
         {
 
             player.activatedTick = MinecraftServer.currentTick;
+            if(!player.world.conduitConfig.idleTimeoutTickNearbyEntities && player.isIdle()) { continue; } // Conduit - Idle API
             maxBB = player.getBoundingBox().grow( maxRange, 256, maxRange );
             ActivationType.MISC.boundingBox = player.getBoundingBox().grow( miscActivationRange, 256, miscActivationRange );
             ActivationType.RAIDER.boundingBox = player.getBoundingBox().grow( raiderActivationRange, 256, raiderActivationRange );
-- 
2.28.0.windows.1

