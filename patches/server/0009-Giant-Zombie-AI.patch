From 7244fc0a3e32fbd63e40576512ae7e311934b70a Mon Sep 17 00:00:00 2001
From: Callum <38501234+calumari@users.noreply.github.com>
Date: Fri, 29 May 2020 08:19:37 +0100
Subject: [PATCH] Giant Zombie AI

---
 .../minecraft/server/EntityGiantZombie.java   | 55 ++++++++++++++++++-
 .../minecraft/server/EntityInsentient.java    |  2 +
 .../conduit/config/ConduitWorldConfig.java    | 15 +++++
 3 files changed, 69 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/server/EntityGiantZombie.java b/src/main/java/net/minecraft/server/EntityGiantZombie.java
index d9e5eaad1..f1ad5fb69 100644
--- a/src/main/java/net/minecraft/server/EntityGiantZombie.java
+++ b/src/main/java/net/minecraft/server/EntityGiantZombie.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import javax.annotation.Nullable; // Conduit
+
 public class EntityGiantZombie extends EntityMonster {
 
     public EntityGiantZombie(EntityTypes<? extends EntityGiantZombie> entitytypes, World world) {
@@ -11,12 +13,59 @@ public class EntityGiantZombie extends EntityMonster {
         return 10.440001F;
     }
 
+    // Conduit - start
+    @Override
+    protected void initPathfinder() {
+        if (world.conduitConfig.giantHasAI) {
+            this.goalSelector.a(0, new PathfinderGoalFloat(this));
+            this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D));
+            this.goalSelector.a(8, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
+            this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
+            if (world.conduitConfig.giantHasHostileAI) {
+                this.goalSelector.a(2, new PathfinderGoalMeleeAttack(this, 1.0D, false));
+                this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(EntityPigZombie.class));
+                this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
+                if (world.conduitConfig.giantAggressiveTowardsVillager)
+                    this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityVillagerAbstract.class, false)); // Spigot
+                this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityIronGolem.class, true));
+                this.targetSelector.a(5, new PathfinderGoalNearestAttackableTarget<>(this, EntityTurtle.class, 10, true, false, EntityTurtle.bw));
+            }
+        }
+    }
+
+    @Nullable
+    @Override
+    public GroupDataEntity prepare(GeneratorAccess generatoraccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
+        GroupDataEntity groupData = super.prepare(world, difficultydamagescaler, enummobspawn, groupdataentity, nbttagcompound);
+        if (groupData == null) {
+            this.setEquipmentBasedOnDifficulty(difficultydamagescaler);
+            this.setEnchantmentBasedOnDifficulty(difficultydamagescaler);
+        }
+        return groupData;
+    }
+
+    @Override
+    protected void setEquipmentBasedOnDifficulty(DifficultyDamageScaler difficultydamagescaler) {
+        super.a(difficultydamagescaler);
+        if (this.random.nextFloat() < (this.world.getDifficulty() == EnumDifficulty.HARD ? 0.05F : 0.01F)) {
+            int i = this.random.nextInt(3);
+
+            // big ass tools hell yeah!
+            if (i == 0) {
+                this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.IRON_SWORD));
+            } else {
+                this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.IRON_SHOVEL));
+            }
+        }
+    }
+    // Conduit - end
+
     @Override
     protected void initAttributes() {
         super.initAttributes();
-        this.getAttributeInstance(GenericAttributes.MAX_HEALTH).setValue(100.0D);
-        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.5D);
-        this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).setValue(50.0D);
+        this.getAttributeInstance(GenericAttributes.MAX_HEALTH).setValue(world.conduitConfig.giantMaxHealth); // Conduit
+        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(world.conduitConfig.giantMovementSpeed); // Conduit
+        this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).setValue(world.conduitConfig.giantAttackDamage); // Conduit
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index b88c47f55..34555c93f 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -868,6 +868,7 @@ public abstract class EntityInsentient extends EntityLiving {
         return f;
     }
 
+    protected void setEquipmentBasedOnDifficulty(DifficultyDamageScaler difficultydamagescaler) { a(difficultydamagescaler); } // Conduit - OBFHELPER
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
         if (this.random.nextFloat() < 0.15F * difficultydamagescaler.d()) {
             int i = this.random.nextInt(2);
@@ -975,6 +976,7 @@ public abstract class EntityInsentient extends EntityLiving {
         }
     }
 
+    protected void setEnchantmentBasedOnDifficulty(DifficultyDamageScaler difficultyDamageScaler) { this.b(difficultyDamageScaler); } // Conduit - OBFHELPER
     protected void b(DifficultyDamageScaler difficultydamagescaler) {
         float f = difficultydamagescaler.d();
 
diff --git a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
index 81c7e791a..ce752f9d1 100644
--- a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
+++ b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
@@ -58,4 +58,19 @@ public class ConduitWorldConfig {
         allowLeashVillager = getBoolean("villager.allow-leash", false);
     }
 
+    public boolean giantHasAI;
+    public boolean giantHasHostileAI;
+    public double giantMaxHealth;
+    public double giantMovementSpeed;
+    public double giantAttackDamage;
+    public boolean giantAggressiveTowardsVillager;
+    private void giantAI() {
+        giantHasAI = getBoolean("giant.enable-ai", false);
+        giantHasHostileAI = getBoolean("giant.enable-hostile-ai", false);
+        giantMaxHealth = getDouble("giant.max-health", 100.0D);
+        giantMovementSpeed = getDouble("giant.movements-speed", 0.5D);
+        giantAttackDamage = getDouble("giant.attack-damage", 50.0);
+        giantAggressiveTowardsVillager = getBoolean("giant.aggressive-towards-villager", false);
+    }
+
 }
-- 
2.24.1.windows.2

