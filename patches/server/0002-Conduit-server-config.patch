From 0a76d7e5f548481eff3d6e48c4c10d8e98537284 Mon Sep 17 00:00:00 2001
From: Callum <38501234+calumari@users.noreply.github.com>
Date: Mon, 25 May 2020 00:37:04 +0100
Subject: [PATCH] Conduit server config

---
 .../net/minecraft/server/DedicatedServer.java |  10 ++
 src/main/java/net/minecraft/server/World.java |   3 +
 .../conduit/command/ConduitCommand.java       |  75 ++++++++++++
 .../conduit/config/ConduitConfig.java         | 111 ++++++++++++++++++
 .../conduit/config/ConduitWorldConfig.java    |  54 +++++++++
 .../org/bukkit/craftbukkit/CraftServer.java   |  10 ++
 .../java/org/bukkit/craftbukkit/Main.java     |   8 ++
 7 files changed, 271 insertions(+)
 create mode 100644 src/main/java/net/socialhangover/conduit/command/ConduitCommand.java
 create mode 100644 src/main/java/net/socialhangover/conduit/config/ConduitConfig.java
 create mode 100644 src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8b2755a3b9..4bf98b5978 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -171,6 +171,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
 
+        // Conduit start
+        try {
+            net.socialhangover.conduit.config.ConduitConfig.init((java.io.File) options.valueOf("conduit-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        net.socialhangover.conduit.config.ConduitConfig.registerCommands();
+        // Conduit end
+
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.aY());
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b598c48692..036777ab64 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -94,6 +94,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
     public final ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
+    public final net.socialhangover.conduit.config.ConduitWorldConfig conduitConfig; // Conduit
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -120,6 +122,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     protected World(WorldDataMutable worlddatamutable, ResourceKey<World> resourcekey, ResourceKey<DimensionManager> resourcekey1, DimensionManager dimensionmanager, Supplier<GameProfilerFiller> supplier, boolean flag, boolean flag1, long i, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, java.util.concurrent.Executor executor) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((WorldDataServer) worlddatamutable).getName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig((((WorldDataServer)worlddatamutable).getName()), this.spigotConfig); // Paper
+        this.conduitConfig = new net.socialhangover.conduit.config.ConduitWorldConfig(((WorldDataServer)worlddatamutable).getName()); // Conduit
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this.paperConfig, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
diff --git a/src/main/java/net/socialhangover/conduit/command/ConduitCommand.java b/src/main/java/net/socialhangover/conduit/command/ConduitCommand.java
new file mode 100644
index 0000000000..a41dd7edeb
--- /dev/null
+++ b/src/main/java/net/socialhangover/conduit/command/ConduitCommand.java
@@ -0,0 +1,75 @@
+package net.socialhangover.conduit.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.WorldServer;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+
+import static com.destroystokyo.paper.PaperCommand.getListMatchingLast;
+
+public class ConduitCommand extends Command {
+
+    public ConduitCommand(String name) {
+        super(name);
+        this.description = "Conduit related commands";
+        this.usageMessage = "/conduit [reload | version]";
+        this.setPermission("bukkit.command.conduit");
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) {
+            return true;
+        }
+
+        if (args.length == 0) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        switch (args[0].toLowerCase()) {
+            case "reload":
+                doReload(sender);
+                break;
+            case "ver":
+            case "version":
+                Command ver = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+                if (ver != null) {
+                    ver.execute(sender, commandLabel, new String[0]);
+                    break;
+                }
+            default:
+                sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+                return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        if (args.length <= 1) {
+            return getListMatchingLast(args, "reload", "version");
+        }
+        return Collections.emptyList();
+    }
+
+    private void doReload(CommandSender sender) {
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+        MinecraftServer console = MinecraftServer.getServer();
+        net.socialhangover.conduit.config.ConduitConfig.init((File) console.options.valueOf("conduit-settings"));
+        for (WorldServer world : console.getWorlds()) {
+            world.conduitConfig.init();
+        }
+        console.server.reloadCount++;
+
+        Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Conduit config reload complete.");
+    }
+}
diff --git a/src/main/java/net/socialhangover/conduit/config/ConduitConfig.java b/src/main/java/net/socialhangover/conduit/config/ConduitConfig.java
new file mode 100644
index 0000000000..c2ba92acbc
--- /dev/null
+++ b/src/main/java/net/socialhangover/conduit/config/ConduitConfig.java
@@ -0,0 +1,111 @@
+package net.socialhangover.conduit.config;
+
+import java.util.HashMap;
+import java.util.Map;
+import net.minecraft.server.MinecraftServer;
+import net.socialhangover.conduit.command.ConduitCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+public final class ConduitConfig {
+
+    private static final String CONFIG_HEADER = "This is the main configuration file for Conduit.";
+    private static final int CURRENT_CONFIG_VERSION = 1;
+
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    static int version;
+    static Map<String, Command> commands;
+
+    public static void init(File file) {
+        CONFIG_FILE = file;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load conduit.yml, please correct your syntax errors", ex);
+            throw new RuntimeException(ex);
+        }
+        config.options().header(CONFIG_HEADER);
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", CURRENT_CONFIG_VERSION);
+        set("config-version", CURRENT_CONFIG_VERSION);
+
+        commands = new HashMap<>();
+        commands.put("conduit", new ConduitCommand("conduit"));
+
+        readConfig(ConduitConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Conduit", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw new RuntimeException(ex);
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+}
diff --git a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
new file mode 100644
index 0000000000..f22c4ae2f1
--- /dev/null
+++ b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
@@ -0,0 +1,54 @@
+package net.socialhangover.conduit.config;
+
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.util.List;
+
+public class ConduitWorldConfig {
+
+    private final String worldName;
+    private final YamlConfiguration config;
+
+    public ConduitWorldConfig(String worldName) {
+        this.worldName = worldName;
+        this.config = ConduitConfig.config;
+        init();
+    }
+
+    public void init() {
+        ConduitConfig.readConfig(ConduitWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<T> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d8103ab0d5..b09c49a166 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -848,6 +848,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        net.socialhangover.conduit.config.ConduitConfig.init((File) console.options.valueOf("conduit-settings")); // Conduit
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -882,6 +883,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.conduitConfig.init(); // Conduit
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -900,6 +902,7 @@ public final class CraftServer implements Server {
         reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        net.socialhangover.conduit.config.ConduitConfig.registerCommands(); // Conduit
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2231,6 +2234,13 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // Conduit start
+        @Override
+        public YamlConfiguration getConduitConfig() {
+            return net.socialhangover.conduit.config.ConduitConfig.config;
+        }
+        // Conduit end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index bac292e6d8..edd4a9eaa2 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -139,6 +139,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Paper end
 
+                // Conduit start
+                acceptsAll(asList("conduit", "conduit-settings"), "File for conduit settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("conduit.yml"))
+                        .describedAs("Yml file");
+                // Conduit end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
-- 
2.24.1.windows.2

