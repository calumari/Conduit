From 9e97d9e99ff3f62e2004f3158c0a9f5e6e1596ce Mon Sep 17 00:00:00 2001
From: Callum <38501234+calumari@users.noreply.github.com>
Date: Fri, 29 May 2020 08:19:37 +0100
Subject: [PATCH] Giant Zombie AI

Based on Purpur's Giant AI patch. However, with different goals,
configurable villager targeting and spawning with tools.
---
 .../minecraft/server/EntityGiantZombie.java   | 41 +++++++++++++++++++
 .../conduit/config/ConduitWorldConfig.java    |  8 ++++
 2 files changed, 49 insertions(+)
 create mode 100644 src/main/java/net/minecraft/server/EntityGiantZombie.java

diff --git a/src/main/java/net/minecraft/server/EntityGiantZombie.java b/src/main/java/net/minecraft/server/EntityGiantZombie.java
new file mode 100644
index 0000000000..d25a8e218d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGiantZombie.java
@@ -0,0 +1,41 @@
+package net.minecraft.server;
+
+public class EntityGiantZombie extends EntityMonster {
+
+    public EntityGiantZombie(EntityTypes<? extends EntityGiantZombie> entitytypes, World world) {
+        super(entitytypes, world);
+    }
+
+    @Override
+    protected float b(EntityPose entitypose, EntitySize entitysize) {
+        return 10.440001F;
+    }
+
+    public static AttributeProvider.Builder m() {
+        return EntityMonster.eS().a(GenericAttributes.MAX_HEALTH, 100.0D).a(GenericAttributes.MOVEMENT_SPEED, 0.5D).a(GenericAttributes.ATTACK_DAMAGE, 50.0D);
+    }
+
+    @Override
+    public float a(BlockPosition blockposition, IWorldReader iworldreader) {
+        return iworldreader.y(blockposition) - 0.5F;
+    }
+
+    // Conduit - start
+    @Override
+    protected void initPathfinder() {
+        if (world.conduitConfig.giantHasAI) {
+            this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D));
+            this.goalSelector.a(8, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
+            this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
+            if (world.conduitConfig.giantHasHostileAI) {
+                this.goalSelector.a(2, new PathfinderGoalMeleeAttack(this, 1.0D, false));
+                this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(EntityPigZombie.class));
+                this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
+                if (world.conduitConfig.giantAggressiveTowardsVillager) this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityVillagerAbstract.class, false)); // Spigot
+                this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityIronGolem.class, true));
+                this.targetSelector.a(5, new PathfinderGoalNearestAttackableTarget<>(this, EntityTurtle.class, 10, true, false, EntityTurtle.bv));
+            }
+        }
+    }
+    // Conduit - end
+}
diff --git a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
index fb5fb3729e..624e4a8ca2 100644
--- a/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
+++ b/src/main/java/net/socialhangover/conduit/config/ConduitWorldConfig.java
@@ -56,4 +56,12 @@ public class ConduitWorldConfig {
         allowLeashVillager = getBoolean("mobs.villager.allow-leash", false);
     }
 
+    public boolean giantHasAI;
+    public boolean giantHasHostileAI;
+    public boolean giantAggressiveTowardsVillager;
+    private void giantSettings() {
+        giantHasAI = getBoolean("mobs.giant.enable-ai", false);
+        giantHasHostileAI = getBoolean("mobs.giant.enable-hostile-ai", false);
+        giantAggressiveTowardsVillager = getBoolean("mobs.giant.aggressive-towards-villager", false);
+    }
 }
-- 
2.24.1.windows.2

